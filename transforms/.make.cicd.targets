# Define the root of the local git clone for the common rules to be able 
# know where they are running from.

# Include a library of common .transform.* targets which most
# transforms should be able to reuse.  However, feel free
# to override/redefine the rules below. 
include $(REPOROOT)/transforms/.make.transforms

######################################################################
## Default setting for TRANSFORM_RUNTIME entry point: 
# python -m dpk_html2parquet.ray.transform --help
# or
# python -m dpk_html2parquet.transform_python --help
#
TRANSFORM_PYTHON_SRC?="-m dpk_$(TRANSFORM_NAME).transform_python"
TRANSFORM_RAY_SRC?="-m dpk_$(TRANSFORM_NAME).ray.transform"
TRANSFORM_SPARK_SRC?="-m dpk_$(TRANSFORM_NAME).spark.transform"

WORKFLOW_VENV_ACTIVATE=${REPOROOT}/transforms/venv/bin/activate

SRC_DIR=${CURDIR}
# Use the docker image that is built for ray runtime
TRANSFORM_RUNTIME=ray
## override settings in .make.default as they assume old structure with ray being the current folder
DOCKER_IMAGE_NAME=$(TRANSFORM_NAME)-$(TRANSFORM_RUNTIME)
DOCKER_LOCAL_IMAGE=$(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_VERSION)


# Only build the image with -f Dockerfile.ray
BUILD_SPECIFIC_RUNTIME=ray

PYTHON_WF := $(shell find ./ -name '*_wf.py')
YAML_WF := $(patsubst %.py, %.yaml, ${PYTHON_WF})

workflow-venv: .check_python_version ${WORKFLOW_VENV_ACTIVATE}

workflow-venv: .check_python_version ${WORKFLOW_VENV_ACTIVATE}

.PHONY: --workflow-clean
--workflow-clean:
	@# Help: Clean up the virtual environment.
	rm -rf ${REPOROOT}/transforms/venv

.PHONY: --workflow-build
--workflow-build: workflow-venv
	$(MAKE) $(YAML_WF)

.PHONY: --workflow-test
--workflow-test: workflow-build
	$(MAKE) TRANSFORM_SRC=${SRC_DIR} \
		TRANSFORM_RUNTIME=$(TRANSFORM_RUNTIME) \
		TRANSFORM_NAME=$(TRANSFORM_NAME) \
		BUILD_SPECIFIC_RUNTIME=$(BUILD_SPECIFIC_RUNTIME) \
		DOCKER_REMOTE_IMAGE=$(DOCKER_REGISTRY_ENDPOINT)/$(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_VERSION) \
		PIPELINE_FILE=$(TRANSFORM_NAME)_wf.yaml .workflows.test-pipeline

.PHONY: --workflow-upload
--workflow-upload:
	@for file in $(YAML_WF); do \
		$(MAKE) .workflows.upload-pipeline PIPELINE_FILE=$$file; \
	done


venv::	.defaults.create-venv
	source venv/bin/activate && $(PIP) install -e $(REPOROOT)/data-processing-lib[ray,spark]
	source venv/bin/activate && $(PIP) install -e $(REPOROOT)/data-connector-lib
	if [ -e requirements.txt ]; then \
		source venv/bin/activate && $(PIP) install -r  requirements.txt; \
	fi; 

test:: .transforms.test-src test-image

clean:: .transforms.clean

## We need to think how we want to do this going forward
set-versions::

## We need to think how we want to do this going forward

build:: image

publish:
	@if [ -e Dockerfile.python ]; then \
		$(MAKE) DOCKER_REMOTE_IMAGE=$(DOCKER_REGISTRY_ENDPOINT)/$(TRANSFORM_NAME)-python:$(DOCKER_IMAGE_VERSION) \
				.defaults.publish-image ; \
	fi
	@if [ -e Dockerfile.ray ]; then \
		$(MAKE) DOCKER_REMOTE_IMAGE=$(DOCKER_REGISTRY_ENDPOINT)/$(TRANSFORM_NAME)-ray:$(DOCKER_IMAGE_VERSION) \
				.defaults.publish-image ; \
	fi
	@if [ -e Dockerfile.spark ]; then \
		$(MAKE) DOCKER_REMOTE_IMAGE=$(DOCKER_REGISTRY_ENDPOINT)/$(TRANSFORM_NAME)-spark:$(DOCKER_IMAGE_VERSION) \
				.defaults.publish-image ; \
	fi

test-image-sequence:: .defaults.lib-whl-image .transforms.test-image-help .transforms.clean

test-image-python:
	$(MAKE) BUILD_SPECIFIC_RUNTIME=python test-image

test-image-ray:
	$(MAKE) BUILD_SPECIFIC_RUNTIME=ray test-image

test-image-spark:
	$(MAKE) BUILD_SPECIFIC_RUNTIME=spark test-image

test-image:: .default.build-lib-wheel
	@if [ -z "$(BUILD_SPECIFIC_RUNTIME)" ] || [ "$(BUILD_SPECIFIC_RUNTIME)" == "python" ]; then \
		if [ -e Dockerfile.python ]; then \
			$(MAKE) DOCKER_FILE=Dockerfile.python \
					TRANSFORM_RUNTIME_SRC_FILE=$(TRANSFORM_PYTHON_SRC) \
					DOCKER_IMAGE_NAME=$(TRANSFORM_NAME)-python \
					test-image-sequence ; \
		fi ;\
	fi
	@if [ -z "$(BUILD_SPECIFIC_RUNTIME)" ] || [ "$(BUILD_SPECIFIC_RUNTIME)" == "ray" ]; then \
		if [ -e Dockerfile.ray ]; then \
			$(MAKE) DOCKER_FILE=Dockerfile.ray \
					TRANSFORM_RUNTIME_SRC_FILE=$(TRANSFORM_RAY_SRC) \
					DOCKER_IMAGE_NAME=$(TRANSFORM_NAME)-ray \
					BASE_IMAGE=$(RAY_BASE_IMAGE)  \
					test-image-sequence ; \
		fi ;\
	fi
	@if [ -z "$(BUILD_SPECIFIC_RUNTIME)" ] || [ "$(BUILD_SPECIFIC_RUNTIME)" == "spark" ]; then \
		if [ -e Dockerfile.spark ]; then \
			$(MAKE) DOCKER_FILE=Dockerfile.spark \
					TRANSFORM_RUNTIME_SRC_FILE=$(TRANSFORM_SPARK_SRC) \
					DOCKER_IMAGE_NAME=$(TRANSFORM_NAME)-spark \
					BASE_IMAGE=$(SPARK_BASE_IMAGE)  \
					test-image-sequence ; \
		fi ;\
	fi
	-rm -rf data-processing-dist


image-python:
	$(MAKE) BUILD_SPECIFIC_RUNTIME=python image

image-ray:
	$(MAKE) BUILD_SPECIFIC_RUNTIME=ray image

image-spark:
	$(MAKE) BUILD_SPECIFIC_RUNTIME=spark image

image:: .default.build-lib-wheel
	## Build all possible images unless a specific runtime is specified
	@if [ -z "$(BUILD_SPECIFIC_RUNTIME)" ] || [ "$(BUILD_SPECIFIC_RUNTIME)" == "python" ]; then \
		if [ -e Dockerfile.python ]; then \
			$(MAKE) DOCKER_FILE=Dockerfile.python \
					DOCKER_IMAGE_NAME=$(TRANSFORM_NAME)-python \
					.defaults.lib-whl-image ; \
		fi ; \
	fi
	@if [ -z "$(BUILD_SPECIFIC_RUNTIME)" ] || [ "$(BUILD_SPECIFIC_RUNTIME)" == "ray" ]; then \
		if [ -e Dockerfile.ray ]; then \
			$(MAKE) DOCKER_FILE=Dockerfile.ray \
					DOCKER_IMAGE_NAME=$(TRANSFORM_NAME)-ray \
					BASE_IMAGE=$(RAY_BASE_IMAGE)  \
					.defaults.lib-whl-image ; \
		fi ; \
	fi
	@if [ -z "$(BUILD_SPECIFIC_RUNTIME)" ] || [ "$(BUILD_SPECIFIC_RUNTIME)" == "spark" ]; then \
		if [ -e Dockerfile.spark ]; then \
			$(MAKE) DOCKER_FILE=Dockerfile.spark \
					DOCKER_IMAGE_NAME=$(TRANSFORM_NAME)-spark \
					BASE_IMAGE=$(SPARK_BASE_IMAGE)  \
					.defaults.lib-whl-image ; \
		fi ; \
	fi
	-rm -rf data-processing-dist

test-src:: .transforms.test-src

setup:: .transforms.setup

kind-load-image:: .transforms.kind-load-image

.PHONY: workflow-vent
workflow-venv:
	if [ -e kfp_ray ]; then                 \
	    $(MAKE) -C kfp_ray TRANSFORM_NAME=$(TRANSFORM_NAME) --workflow-venv;   \
	fi

.PHONY: workflow-test
workflow-test:
	if [ -e kfp_ray ]; then                 \
	    $(MAKE) -C kfp_ray TRANSFORM_NAME=$(TRANSFORM_NAME) --workflow-test;   \
	fi

.PHONY: workflow-upload
workflow-upload:
	if [ -e kfp_ray ]; then                 \
	    $(MAKE) -C kfp_ray TRANSFORM_NAME=$(TRANSFORM_NAME) --workflow-upload; \
	fi

.PHONY: workflow-build
workflow-build:
	if [ -e kfp_ray ]; then                 \
	    $(MAKE) -C  kfp_ray TRANSFORM_NAME=$(TRANSFORM_NAME) --workflow-build; \
	fi


